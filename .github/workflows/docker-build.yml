name: Docker Build and Push

on:
  push:
    branches:
      - main
      - master
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ toLower(github.repository) }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute image and safe tags
        id: meta
        shell: bash
        run: |
          set -euo pipefail

          # Image (registry + owner/repo)
          IMAGE="${REGISTRY}/${IMAGE_NAME}"

          # Short SHA (7 chars)
          SHORT_SHA="${GITHUB_SHA:0:7}"

          # Determine ref name (branch or tag)
          if [[ "${GITHUB_REF}" == refs/heads/* ]]; then
            REF_NAME="${GITHUB_REF#refs/heads/}"
          elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            REF_NAME="${GITHUB_REF#refs/tags/}"
          else
            REF_NAME=""
          fi

          # Sanitize ref name: replace invalid chars with '-' and trim leading/trailing '-'
          REF_SANITIZED="$(echo "${REF_NAME}" | sed -E 's/[^a-zA-Z0-9._-]+/-/g' | sed -E 's/^-+//; s/-+$//')"

          # Build preferred tag:
          # - If we have a sanitized ref (branch or tag) use ref-sha
          # - Else use short-sha
          # - Else fallback to 'latest'
          if [[ -n "${REF_SANITIZED}" ]]; then
            TAG="${REF_SANITIZED}-${SHORT_SHA}"
          elif [[ -n "${SHORT_SHA}" ]]; then
            TAG="${SHORT_SHA}"
          else
            TAG="latest"
          fi

          # Ensure tag does not start with a hyphen (invalid)
          if [[ "${TAG}" == -* ]]; then
            TAG="g${TAG}"
          fi

          # Compose tags to push: always include IMAGE:TAG.
          # Also include IMAGE:latest when building for main/master or for tag events.
          PUSH_TAGS="${IMAGE}:${TAG}"
          if [[ "${GITHUB_REF}" == refs/heads/main || "${GITHUB_REF}" == refs/heads/master || "${GITHUB_REF}" == refs/tags/* ]]; then
            PUSH_TAGS="${PUSH_TAGS},${IMAGE}:latest"
          fi

          echo "image=${IMAGE}" >> "$GITHUB_OUTPUT"
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"
          echo "tags=${PUSH_TAGS}" >> "$GITHUB_OUTPUT"
          echo "Computed image: ${IMAGE}:${TAG}"
          echo "Computed push tags: ${PUSH_TAGS}"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            org.opencontainers.image.created=${{ github.run_started_at }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Test Docker image
        if: github.event_name == 'pull_request'
        run: |
          docker build -t test-image .
          docker run -d --name test-container \
            -e JWT_SECRET=test-secret-key-min-32-characters-long \
            -e CLINE_API_KEY=sk-test-key \
            test-image
          sleep 10
          docker logs test-container || true
          docker stop test-container || true
          docker rm test-container || true

      - name: Generate deployment summary
        if: github.event_name != 'pull_request'
        run: |
          echo "## Docker Image Built Successfully! ðŸš€" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Image Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: ${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tags**: " >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Quick Start" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "docker run -d -p 3000:3000 \\" >> $GITHUB_STEP_SUMMARY
          echo "  -e CLINE_API_KEY=your-key \\" >> $GITHUB_STEP_SUMMARY
          echo "  -e JWT_SECRET=your-secret \\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Options" >> $GITHUB_STEP_SUMMARY
          echo "- Docker Compose: See `docker-compose.yml`" >> $GITHUB_STEP_SUMMARY
          echo "- Coolify: Use `coolify-config.json`" >> $GITHUB_STEP_SUMMARY
          echo "- See `DOCKER_SETUP.md` for detailed instructions" >> $GITHUB_STEP_SUMMARY

  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
